services:
  postgres:
    image: postgres:17
    container_name: postgres-patient-service
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: korie123
      POSTGRES_DB: patient_service
    ports:
      - "5555:5432"
    networks:
      - spring-services
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  patient-service:
    build:
      context: ./patient-service
      dockerfile: Dockerfile
    container_name: patient-service
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_USER: postgres
      DB_PASS: korie123
      DB_URL: jdbc:postgresql://postgres:5432/patient_service
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - billing-service
    networks:
      - spring-services
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  billing-service:
    build:
      context: ./billing-service
      dockerfile: Dockerfile
    container_name: billing-service
    environment:
      SPRING_PROFILES_ACTIVE: prod
    ports:
      - "8081:8081"
      - "9091:9091"
    networks:
      - spring-services
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    networks:
      - spring-services
    environment:
      - KAFKA_KRAFT_MODE=true
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true

  analytics-service:
    build:
        context: ./analytic-service
        dockerfile: Dockerfile
    container_name: analytics-service
    environment:
      SPRING_PROFILES_ACTIVE: prod
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - kafka
      - patient-service
    ports:
      - "8082:8080"
    networks:
      - spring-services
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    environment:
      SPRING_PROFILES_ACTIVE: prod
    ports:
      - "3000:3000"
    depends_on:
      - patient-service
      - billing-service
      - analytics-service
      - auth-service
    networks:
      - spring-services
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_USER: postgres
      DB_PASS: korie123
    ports:
      - "8083:8083"
    depends_on:
      - postgres-auth
    networks:
      - spring-services
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  postgres-auth:
    image: postgres:17
    container_name: postgres-auth-service
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: korie123
      POSTGRES_DB: auth_service
    networks:
      - spring-services
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  spring-services:
    driver: bridge